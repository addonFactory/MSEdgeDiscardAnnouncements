# MSEdgeDiscardAnnouncements: An appModule to discard some of notifications generated by Microsoft Edge
# Copyright (C) 2022-2023 Beqa Gozalishvili
# Released under GPL 2

import comtypes

import addonHandler
import api
import appModuleHandler
import browseMode
import config
import controlTypes
import eventHandler
import gui
from NVDAObjects.behaviors import EditableTextWithAutoSelectDetection
from NVDAObjects.UIA import UIA
import wx
from .settings import settingItems
    
addonHandler.initTranslation()
addonInstance = addonHandler.getCodeAddon()
addonName = addonInstance.name
addonSummary = addonInstance.manifest["summary"]

config.conf.spec[addonName] = {setting.configKey: setting.defaultValue for setting in settingItems}
scriptSet = False

class CustomEditableTextWithAutoSelectDetection(EditableTextWithAutoSelectDetection):

    def event_caret(self, *args, **kwargs):
        try:
            return super().event_caret(*args, **kwargs)
        except comtypes.COMError:
            pass

class AppModule(appModuleHandler.AppModule):
    activityIDs = []

    def __init__(self, processID, appName):
        super().__init__(processID, appName)
        categoryClasses = gui.settingsDialogs.NVDASettingsDialog.categoryClasses
        if not (MSEdgeDiscardAnnouncementsPanel in categoryClasses):
            categoryClasses.append(MSEdgeDiscardAnnouncementsPanel)

    def terminate(self):
        super().terminate()
        categoryClasses = gui.settingsDialogs.NVDASettingsDialog.categoryClasses
        if (MSEdgeDiscardAnnouncementsPanel in categoryClasses):
            gui.settingsDialogs.NVDASettingsDialog.categoryClasses.remove(MSEdgeDiscardAnnouncementsPanel)

    def chooseNVDAObjectOverlayClasses(self, obj, clsList):
        if isinstance(obj, UIA) and ((obj.role == controlTypes.role.Role.EDITABLETEXT and obj.UIAElement.CurrentClassName  =="OmniboxViewViews") or obj.UIAElement.CurrentClassName == "Textfield"):
            clsList.insert(0, CustomEditableTextWithAutoSelectDetection)

    def event_NVDAObject_init(self, obj):
        if not "ShowSuggestions" in self.activityIDs:
            return
        if isinstance(obj, UIA) and obj.UIAElement.CurrentClassName == "OmniboxResultView":
            obj.isDescendantOf = lambda obj: False

    def getActivityIDsFromConfig(self):
        edgeConf = config.conf[addonName]
        self.activityIDs = [k for k, v in edgeConf.items() if type(v) == bool and v == False]

    def event_appModule_gainFocus(self):
        self.getActivityIDsFromConfig()

    def event_UIA_notification(self, obj, nextHandler, activityId=None, **kwargs):
        if activityId in self.activityIDs: return
        if "HubDownloads" in activityId:
            if obj.appModule == api.getForegroundObject().appModule and not obj.isDescendantOf(api.getForegroundObject()): return
        nextHandler()

class MSEdgeDiscardAnnouncementsPanel(gui.settingsDialogs.SettingsPanel):
    title = addonSummary

    def makeSettings(self, sizer):
        self.config = config.conf[addonName]
        sHelper = gui.guiHelper.BoxSizerHelper(self, sizer=sizer)
        notificationsLabel = _("&Configure MSEdge notifications")
        self.settingChoices = [setting.label for setting in settingItems]
        self.settingList=sHelper.addLabeledControl(notificationsLabel, gui.nvdaControls.CustomCheckListBox, choices=self.settingChoices)
        self.settingList.CheckedItems = [index for index, setting in enumerate(settingItems) if self.config[setting.configKey]]
        self.settingList.Select(0)

    def onSave(self):
                [self.config.__setitem__(setting.configKey, self.settingList.IsChecked(index)) for index, setting in enumerate(settingItems)]
